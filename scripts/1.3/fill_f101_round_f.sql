CREATE OR REPLACE PROCEDURE dm.fill_f101_round_f(i_OnDate DATE)
    LANGUAGE plpgsql
AS $$
DECLARE
    v_FromDate DATE;
    v_ToDate DATE;
    v_PrevDate DATE;
BEGIN
    v_FromDate := DATE_TRUNC('month', i_OnDate) - INTERVAL '1 month';
    v_ToDate := DATE_TRUNC('month', i_OnDate) - INTERVAL '1 day';
    v_PrevDate := v_FromDate - INTERVAL '1 day';

    INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, STATUS, COMMENT)
    VALUES ('fill_f101_round_f', CURRENT_TIMESTAMP, 'STARTED', 'Procedure started for ' || i_OnDate);

    INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, STATUS, COMMENT)
    SELECT 'fill_f101_round_f', CURRENT_TIMESTAMP, 'INFO', 'Active accounts: ' || COUNT(*)
    FROM DS.MD_ACCOUNT_D acc
    WHERE acc.DATA_ACTUAL_DATE <= v_ToDate AND acc.DATA_ACTUAL_END_DATE >= v_FromDate;

    DELETE FROM DM.DM_F101_ROUND_F WHERE FROM_DATE = v_FromDate AND TO_DATE = v_ToDate;

    INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, STATUS, COMMENT)
    VALUES ('fill_f101_round_f', CURRENT_TIMESTAMP, 'INFO', 'Starting data aggregation');

    INSERT INTO DM.DM_F101_ROUND_F (
        FROM_DATE, TO_DATE, CHAPTER, LEDGER_ACCOUNT, CHARACTERISTIC,
        BALANCE_IN_RUB, R_BALANCE_IN_RUB, BALANCE_IN_VAL, R_BALANCE_IN_VAL, BALANCE_IN_TOTAL, R_BALANCE_IN_TOTAL,
        TURN_DEB_RUB, R_TURN_DEB_RUB, TURN_DEB_VAL, R_TURN_DEB_VAL, TURN_DEB_TOTAL, R_TURN_DEB_TOTAL,
        TURN_CRE_RUB, R_TURN_CRE_RUB, TURN_CRE_VAL, R_TURN_CRE_VAL, TURN_CRE_TOTAL, R_TURN_CRE_TOTAL,
        BALANCE_OUT_RUB, R_BALANCE_OUT_RUB, BALANCE_OUT_VAL, R_BALANCE_OUT_VAL, BALANCE_OUT_TOTAL, R_BALANCE_OUT_TOTAL
    )
    SELECT
        v_FromDate, v_ToDate,
        la.CHAPTER,
        LEFT(acc.ACCOUNT_NUMBER, 5) AS LEDGER_ACCOUNT,
        acc.CHAR_TYPE AS CHARACTERISTIC,
        SUM(CASE WHEN acc.CURRENCY_CODE IN ('810', '643') THEN prev_bal.BALANCE_OUT_RUB ELSE 0 END) AS BALANCE_IN_RUB,
        SUM(0) AS R_BALANCE_IN_RUB,
        SUM(CASE WHEN acc.CURRENCY_CODE NOT IN ('810', '643') THEN prev_bal.BALANCE_OUT_RUB ELSE 0 END) AS BALANCE_IN_VAL,
        SUM(0) AS R_BALANCE_IN_VAL,
        SUM(prev_bal.BALANCE_OUT_RUB) AS BALANCE_IN_TOTAL,
        SUM(0) AS R_BALANCE_IN_TOTAL,
        SUM(CASE WHEN acc.CURRENCY_CODE IN ('810', '643') THEN turn.DEBET_AMOUNT_RUB ELSE 0 END) AS TURN_DEB_RUB,
        SUM(0) AS R_TURN_DEB_RUB,
        SUM(CASE WHEN acc.CURRENCY_CODE NOT IN ('810', '643') THEN turn.DEBET_AMOUNT_RUB ELSE 0 END) AS TURN_DEB_VAL,
        SUM(0) AS R_TURN_DEB_VAL,
        SUM(turn.DEBET_AMOUNT_RUB) AS TURN_DEB_TOTAL,
        SUM(0) AS R_TURN_DEB_TOTAL,
        SUM(CASE WHEN acc.CURRENCY_CODE IN ('810', '643') THEN turn.CREDIT_AMOUNT_RUB ELSE 0 END) AS TURN_CRE_RUB,
        SUM(0) AS R_TURN_CRE_RUB,
        SUM(CASE WHEN acc.CURRENCY_CODE NOT IN ('810', '643') THEN turn.CREDIT_AMOUNT_RUB ELSE 0 END) AS TURN_CRE_VAL,
        SUM(0) AS R_TURN_CRE_VAL,
        SUM(turn.CREDIT_AMOUNT_RUB) AS TURN_CRE_TOTAL,
        SUM(0) AS R_TURN_CRE_TOTAL,
        SUM(CASE WHEN acc.CURRENCY_CODE IN ('810', '643') THEN bal.BALANCE_OUT_RUB ELSE 0 END) AS BALANCE_OUT_RUB,
        SUM(0) AS R_BALANCE_OUT_RUB,
        SUM(CASE WHEN acc.CURRENCY_CODE NOT IN ('810', '643') THEN bal.BALANCE_OUT_RUB ELSE 0 END) AS BALANCE_OUT_VAL,
        SUM(0) AS R_BALANCE_OUT_VAL,
        SUM(bal.BALANCE_OUT_RUB) AS BALANCE_OUT_TOTAL,
        SUM(0) AS R_BALANCE_OUT_TOTAL
    FROM
        DS.MD_ACCOUNT_D acc
            LEFT JOIN DS.MD_LEDGER_ACCOUNT_S la ON LEFT(acc.ACCOUNT_NUMBER, 5) = CAST(la.LEDGER_ACCOUNT AS CHAR(5))
            LEFT JOIN DM.DM_ACCOUNT_BALANCE_F prev_bal ON acc.ACCOUNT_RK = prev_bal.ACCOUNT_RK AND prev_bal.ON_DATE = v_PrevDate
            LEFT JOIN DM.DM_ACCOUNT_TURNOVER_F turn ON acc.ACCOUNT_RK = turn.ACCOUNT_RK AND turn.ON_DATE BETWEEN v_FromDate AND v_ToDate
            LEFT JOIN DM.DM_ACCOUNT_BALANCE_F bal ON acc.ACCOUNT_RK = bal.ACCOUNT_RK AND bal.ON_DATE = v_ToDate
    WHERE
        acc.DATA_ACTUAL_DATE <= v_ToDate AND acc.DATA_ACTUAL_END_DATE >= v_FromDate
    GROUP BY
        la.CHAPTER, LEFT(acc.ACCOUNT_NUMBER, 5), acc.CHAR_TYPE;

    INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, END_TIME, STATUS, COMMENT)
    VALUES ('fill_f101_round_f', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SUCCESS', 'Form 101 calculated successfully for ' || i_OnDate);

EXCEPTION
    WHEN OTHERS THEN
        INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, END_TIME, STATUS, COMMENT)
        VALUES ('fill_f101_round_f', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'FAILURE', SQLERRM);
        RAISE;
END;
$$;

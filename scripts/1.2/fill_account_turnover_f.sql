CREATE OR REPLACE PROCEDURE DM.FILL_ACCOUNT_TURNOVER_F(I_ONDATE DATE)
AS $$
BEGIN
    DELETE FROM DM.DM_ACCOUNT_TURNOVER_F WHERE ON_DATE = I_ONDATE;
    WITH CREDIT_SUM AS (
        SELECT CREDIT_ACCOUNT_RK, SUM(CREDIT_AMOUNT) AS CREDIT_AMOUNT
        FROM DS.FT_POSTING_F
        WHERE OPER_DATE = I_ONDATE
        GROUP BY CREDIT_ACCOUNT_RK
    ),
         DEBET_SUM AS (
             SELECT DEBET_ACCOUNT_RK, SUM(DEBET_AMOUNT) AS DEBET_AMOUNT
             FROM DS.FT_POSTING_F
             WHERE OPER_DATE = I_ONDATE
             GROUP BY DEBET_ACCOUNT_RK
         ),
         ACCOUNTS AS (
             SELECT CREDIT_ACCOUNT_RK AS ACCOUNT_RK
             FROM CREDIT_SUM
             UNION
             SELECT DEBET_ACCOUNT_RK AS ACCOUNT_RK
             FROM DEBET_SUM
         )
    INSERT INTO DM.DM_ACCOUNT_TURNOVER_F (
        ON_DATE,
        ACCOUNT_RK,
        CREDIT_AMOUNT,
        CREDIT_AMOUNT_RUB,
        DEBET_AMOUNT,
        DEBET_AMOUNT_RUB
    )
    SELECT
        I_ONDATE AS ON_DATE,
        ACC.ACCOUNT_RK,
        COALESCE(CS.CREDIT_AMOUNT, 0) AS CREDIT_AMOUNT,
        COALESCE(CS.CREDIT_AMOUNT, 0) * COALESCE(MERD.REDUCED_COURCE, 1) AS CREDIT_AMOUNT_RUB,
        COALESCE(DS.DEBET_AMOUNT, 0) AS DEBET_AMOUNT,
        COALESCE(DS.DEBET_AMOUNT, 0) * COALESCE(MERD.REDUCED_COURCE, 1) AS DEBET_AMOUNT_RUB
    FROM
        ACCOUNTS ACC
            LEFT JOIN CREDIT_SUM CS ON ACC.ACCOUNT_RK = CS.CREDIT_ACCOUNT_RK
            LEFT JOIN DEBET_SUM DS ON ACC.ACCOUNT_RK = DS.DEBET_ACCOUNT_RK
            LEFT JOIN DS.MD_EXCHANGE_RATE_D MERD
                      ON MERD.CURRENCY_RK = (
                          SELECT CURRENCY_RK
                          FROM DS.FT_BALANCE_F BF
                          WHERE ACC.ACCOUNT_RK = BF.ACCOUNT_RK
                      )
                          AND I_ONDATE BETWEEN MERD.DATA_ACTUAL_DATE AND MERD.DATA_ACTUAL_END_DATE;

    INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, END_TIME, STATUS, COMMENT)
    VALUES ('dm.fill_account_turnover_f', NOW(), NOW(), 'SUCCESS', 'Turnover calculation for ' || I_ONDATE || ' completed.');
EXCEPTION
    WHEN OTHERS THEN
        INSERT INTO LOGS.LOAD_LOG (PROCESS_NAME, START_TIME, END_TIME, STATUS, COMMENT)
        VALUES ('dm.fill_account_turnover_f', NOW(), NOW(), 'FAILED', 'Error: ' || SQLERRM);
        RAISE;
END;
$$ LANGUAGE PLPGSQL;
